
swagger: '2.0'
info:
  title: "Library API"
  description: "Used to manage the everyday functionalities of a library"
  version: "1.0.0"
host: "127.0.0.1:5003" 
schemes:
  - "https"
  - "http"
consumes:
  - "application/json" # My api recieves JSON data
produces:
  - "application/json" # My api produces JSON data

securityDefinitions: #Describing how to add token auth to the endpoints
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths: 

  /users/login:
    post:
      tags:
        - Users
      summary: "Login endpoint, (generates token)"
      description: "Validates user credentials, generates and returns a user specific token"
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              message: "Welcome User"
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOj..."
  
  /users:
    post:
      tags:
        - Users
      summary: "Endpoint to Generate/register a new user"
      description: "Endpoint to create a new user in our Library system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new User."
          required: true
          schema:
            $ref: "#/definitions/UserInput"
      responses:
        201:
          description: "Successful User Creation"
          schema:
            $ref: "#/definitions/UserResponse"
          examples:
            application/json:
              DOB: "1900-01-01"
              address: "123 Fun St."
              email: "test@test1.com"
              id: 0
              password: "<encrypted password>"
              role: "Admin"
              username: "test_user"

    get: #Get all users Endpoint
      tags:
        - Users
      summary: "Returns all users"
      description: "Endpoint to recieve an array of user objects."
      responses:
        200:
          description: "Successfully Retrieved Users"
          schema:
            $ref: "#/definitions/UsersResponse"

    put: #Update a user
      tags:
        - Users
      summary: "Update User Endpoint"
      description: "Endpoint to update a user, requires a token, user will be identified by the token"
      security:
        - bearerAuth: [] #Referencing our Token Auth definition (Make sure when authorizing in Swagger you add Bearer <Token>)
      parameters:
        - in: "body"
          name: "body"
          description: "User Updates"
          required: true
          schema:
            $ref: "#/definitions/UserInput"
          
      responses:
        200:
          description: "Creation Successful"
          schema:
            $ref: "#/definitions/UserResponse"
          examples:
            application/json:
              DOB: "1900-01-01"
              address: "123 Fun St."
              email: "test@test1.com"
              id: 0
              password: "<encrypted password>"
              role: "Admin"
              username: "test_user"

    delete: #Delete a user
      tags:
        - Users
      summary: "Delete a User"
      description: "Delete a user, requires a token, token will be used to identify user to delete."
      security:
        - bearerAuth: []
      responses:
        200:
          schema:
            type: object
            properties:
              message:
                type: string

definitions:

  LoginCredentials:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"

    required:
      - username
      - password
  
  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

  
  UserInput:
    type: "object"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      DOB:
        type: "string"
        format: date
      password:
        type: "string"
      address:
        type: "string"
      role:
        type: "string"

    required:
      - username
      - email
      - password
      - role

  UserResponse:
    type: "object"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      DOB:
        type: "string"
        format: date
      password:
        type: "string"
      address:
        type: "string"
      role:
        type: "string"

  UsersResponse: #Response for multiple users
    type: array
    items:
      type: object
      properties:
        DOB:
          type: string
        address:
          type: string
        email:
          type: string
        id:
          type: integer
        password:
          type: string
        role:
          type: string
        username:
          type: string